// Generated by Haxe 3.4.7
(function () { "use strict";
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var Game = function() {
	this._currentPlayer = 0;
	this._players = ["X","O"];
	this._tilesStates = [["_","_","_"],["_","_","_"],["_","_","_"]];
	this._tileSize = 100;
	this._numRows = 3;
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		_gthis.init();
		_gthis.drawGrid();
	});
};
Game.__name__ = true;
Game.prototype = {
	init: function() {
		this._container = window.document.createElement("div");
		this._container.className = "game-container";
		window.document.querySelector(".container").appendChild(this._container);
	}
	,drawGrid: function() {
		this._gridContainer = window.document.createElement("div");
		this._gridContainer.className = "grid-container";
		this._container.appendChild(this._gridContainer);
		var _g1 = 0;
		var _g = this._numRows;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = this._numRows;
			while(_g3 < _g2) {
				var j = _g3++;
				var tile = this.drawTile(i,j);
				this._gridContainer.appendChild(tile);
			}
		}
	}
	,drawTile: function(xPos,yPos) {
		var _gthis = this;
		var tile = window.document.createElement("div");
		tile.className = "tile tile-available";
		tile.style.marginLeft = xPos * this._tileSize + "px";
		tile.style.marginTop = yPos * this._tileSize + "px";
		tile.innerText = "";
		tile.dataset.x = xPos == null ? "null" : "" + xPos;
		tile.dataset.y = yPos == null ? "null" : "" + yPos;
		if(this._numRows - 1 > yPos) {
			tile.style.borderBottom = "1px solid black";
		}
		if(this._numRows - 1 > xPos) {
			tile.style.borderRight = "1px solid black";
		}
		tile.onmouseover = function(e) {
			tile.textContent = _gthis._players[_gthis._currentPlayer];
		};
		tile.onmouseleave = function(e1) {
			tile.textContent = "";
		};
		tile.onclick = function(e2) {
			_gthis.lockTile(tile);
			_gthis.storeState(xPos,yPos,_gthis._players[_gthis._currentPlayer]);
			var result = _gthis.checkStates();
			if(null == result) {
				_gthis.switchPlayer();
			} else {
				_gthis.endGame();
			}
		};
		return tile;
	}
	,lockTile: function(tile) {
		tile.onmouseover = null;
		tile.onmouseleave = null;
		tile.onclick = null;
		tile.className = "tile";
	}
	,switchPlayer: function() {
		++this._currentPlayer;
		if(this._currentPlayer >= this._players.length) {
			this._currentPlayer = 0;
		}
	}
	,endGame: function() {
		var _g1 = 0;
		var _g = this._gridContainer.childElementCount;
		while(_g1 < _g) {
			var i = _g1++;
			var tile = this._gridContainer.children[i];
			this.lockTile(tile);
		}
		js_Browser.alert("Player " + this._players[this._currentPlayer] + " win !");
	}
	,storeState: function(x,y,value) {
		this._tilesStates[x][y] = value;
	}
	,checkStates: function() {
		if(this.checkPlayerWon()) {
			return this._players[this._currentPlayer];
		}
		return null;
	}
	,checkPlayerWon: function() {
		var model = "A...A...A|A..A..A|A.A.A|AAA";
		var pattern = StringTools.replace(model,"A",this._players[this._currentPlayer]);
		return new EReg(pattern,"").match(this.joinState());
	}
	,joinState: function() {
		return this._tilesStates.map(function(a) {
			return a.join("");
		}).join("");
	}
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var game = new Game();
};
Math.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
String.__name__ = true;
Array.__name__ = true;
Main.main();
})();

//# sourceMappingURL=gametictactoe.js.map